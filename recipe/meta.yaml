{% set name = "cpl" %}
{% set version = "7.2.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://ftp.eso.org/pub/dfs/pipelines/libraries//{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 65e7670729fe6a03f8bcf6b8140cdaf101f471a1a3a4d426811fa2f22cf89a4c
  patches:
    - cfitsio_version.patch

build:
  number: 1
  skip: true  # [win or osx]
  run_exports:
    # The ABI doesn't seem to change for minor or patch release,
    # https://abi-laboratory.pro/?view=timeline&l=cpl.
    # So we pin only major releases.
    - {{ pin_compatible('cpl', max_pin='x') }}

requirements:
  build:
    - {{ compiler('c') }}
    - make
    - llvm-openmp  # [osx]
    - libgomp      # [linux]
  host:
    - cfitsio
    - fftw
    - wcslib
  run:
    # cpl has a check that it requires at least the cfitsio version was built against.
    # Note that this isn't strictly necessary to add because cfitsio is pinned
    # globally in conda-forge-pinning to x.x.x anyway, meaning you will automatically
    # get the same cfitsio version at build and run time. But if cfitsio weren't
    # pinned in conda-forge-pinning, the following pin would be needed.
    - {{ pin_compatible('cfitsio', min_pin='x.x.x') }}
    # wcslib has no run_exports
    - wcslib
    # libcurl is not a direct dependency of CPL, but libtool links CPL to it because
    # pkg-config detects libcurl, probably due to this cfitsio recipe patch:
    # https://github.com/conda-forge/cfitsio-feedstock/blob/master/recipe/lcurl-pkg-config.patch
    # If we were to manually tell libtool not to do so, libtool links to libnsl.
    # So we either need to include libnsl here and do some funky replacements
    # in all the Makefiles, or just include libcurl here.
    - libcurl

test:
  commands:
    - test -f ${PREFIX}/lib/libcplcore{{ SHLIB_EXT }}
    - test -f ${PREFIX}/lib/libcplui{{ SHLIB_EXT }}

about:
  home: https://www.eso.org/sci/software/cpl/
  license: GPL-2.0-or-later
  license_family: GPL
  license_file: COPYING
  summary: A software toolkit to develop astronomical data-reduction tasks
  description: |
    The Common Pipeline Library (CPL) comprises a set of ISO-C libraries 
    that provide a comprehensive, efficient and robust software toolkit 
    to develop astronomical data-reduction tasks (known as "recipes"). 
    These data-reduction tasks can then be executed manually by a user, 
    or can be triggered in an automated data-reduction framework (known
    as "pipelines") which are used at ESO to monitor the health status
    of VLT instruments, for quick-look data processing at the observatory, 
    and the creation of data products available from the ESO archive facility.
  doc_url: https://www.eso.org/sci/software/cpl/documentation.html

extra:
  recipe-maintainers:
    - teake
    - hugobuddel
